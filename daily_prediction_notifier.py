"""
Daily Prediction Notifier
Sends daily NHL game predictions via email, Discord, or other methods
"""

import smtplib
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import pytz
from prediction_interface import PredictionInterface
import os

class DailyPredictionNotifier:
    def __init__(self):
        """Initialize the notifier"""
        self.predictor = PredictionInterface()
        
    def get_daily_predictions_summary(self):
        """Get formatted summary of today's predictions"""
        predictions = self.predictor.get_todays_predictions()
        
        if not predictions:
            return "No games scheduled for today."
        
        # Format predictions as bullet points (row 3, row 4, ...)
        summary = "üèí **NHL GAME PREDICTIONS FOR TODAY** üèí\n\n"
        for i, pred in enumerate(predictions, 1):
            away_team = pred['away_team']
            home_team = pred['home_team']
            away_prob = pred['predicted_away_win_prob'] * 100  # Convert to percentage
            home_prob = pred['predicted_home_win_prob'] * 100  # Convert to percentage
            favorite = pred['favorite']
            spread = pred['spread']

            summary += f"- **Row {i}**: {away_team} @ {home_team}\n"
            summary += f"  - üéØ {away_team} {away_prob:.1f}% | {home_team} {home_prob:.1f}%\n"
            summary += f"  - ‚≠ê Favorite: {favorite} (+{spread:.1f}%)\n"
        
        # Add model performance
        perf = self.predictor.learning_model.get_model_performance()
        summary += f"üìä **Model Performance:**\n"
        summary += f"   Accuracy: {perf['accuracy']:.1%}\n"
        summary += f"   Recent Accuracy: {perf['recent_accuracy']:.1%}\n"
        summary += f"   Total Games: {perf['total_games']}\n\n"
        
        summary += f"ü§ñ Generated by NHL Self-Learning Model\n"
        summary += f"üìÖ {datetime.now(pytz.timezone('US/Central')).strftime('%Y-%m-%d %I:%M %p CT')}"
        
        return summary
    
    def send_email_notification(self, to_email, subject="Daily NHL Predictions"):
        """Send predictions via email"""
        try:
            # Email configuration (you'll need to set these as environment variables)
            smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
            smtp_port = int(os.getenv('SMTP_PORT', '587'))
            email_user = os.getenv('EMAIL_USER')
            email_password = os.getenv('EMAIL_PASSWORD')
            
            if not email_user or not email_password:
                print("‚ùå Email credentials not configured. Set EMAIL_USER and EMAIL_PASSWORD environment variables.")
                return False
            
            # Get predictions
            predictions_text = self.get_daily_predictions_summary()
            
            # Create message
            msg = MIMEMultipart()
            msg['From'] = email_user
            msg['To'] = to_email
            msg['Subject'] = subject
            
            # Add body
            msg.attach(MIMEText(predictions_text, 'plain'))
            
            # Send email
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(email_user, email_password)
            text = msg.as_string()
            server.sendmail(email_user, to_email, text)
            server.quit()
            
            print(f"‚úÖ Email sent successfully to {to_email}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error sending email: {e}")
            return False
    
    def send_discord_notification(self, webhook_url):
        """Send predictions via Discord webhook"""
        try:
            import requests
            
            predictions_text = self.get_daily_predictions_summary()
            
            # Discord webhook payload
            payload = {
                "content": predictions_text,
                "username": "NHL Predictions Bot",
                "avatar_url": "https://cdn-icons-png.flaticon.com/512/3048/3048127.png"
            }
            
            response = requests.post(webhook_url, json=payload)
            
            if response.status_code == 204:
                print("‚úÖ Discord notification sent successfully")
                return True
            else:
                print(f"‚ùå Discord notification failed: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error sending Discord notification: {e}")
            return False
    
    def save_to_file(self, filename=None):
        """Save predictions to a text file"""
        try:
            if not filename:
                date_str = datetime.now(pytz.timezone('US/Central')).strftime('%Y%m%d')
                filename = f"daily_predictions_{date_str}.txt"
            
            predictions_text = self.get_daily_predictions_summary()
            
            with open(filename, 'w') as f:
                f.write(predictions_text)
            
            print(f"‚úÖ Predictions saved to {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error saving to file: {e}")
            return False
    
    def send_notification(self, method="file", **kwargs):
        """Send notification using specified method"""
        if method == "email":
            return self.send_email_notification(
                kwargs.get('to_email'),
                kwargs.get('subject', 'Daily NHL Predictions')
            )
        elif method == "discord":
            return self.send_discord_notification(kwargs.get('webhook_url'))
        elif method == "file":
            return self.save_to_file(kwargs.get('filename'))
        else:
            print(f"‚ùå Unknown notification method: {method}")
            return False


def main():
    """Main function to send daily predictions"""
    notifier = DailyPredictionNotifier()
    
    print("üîî DAILY NHL PREDICTIONS NOTIFIER")
    print("=" * 50)
    
    # Get predictions summary
    summary = notifier.get_daily_predictions_summary()
    print(summary)
    print("\n" + "=" * 50)
    
    # Send notifications
    print("\nüì§ SENDING NOTIFICATIONS:")
    
    # Save to file (always works)
    notifier.save_to_file()
    
    # Try email if configured
    email = os.getenv('NOTIFICATION_EMAIL')
    if email:
        notifier.send_email_notification(email)
    else:
        print("‚ÑπÔ∏è  Set NOTIFICATION_EMAIL environment variable to enable email notifications")
    
    # Try Discord if configured
    discord_webhook = os.getenv('DISCORD_WEBHOOK_URL')
    if discord_webhook:
        notifier.send_discord_notification(discord_webhook)
    else:
        print("‚ÑπÔ∏è  Set DISCORD_WEBHOOK_URL environment variable to enable Discord notifications")


if __name__ == "__main__":
    main()
