"""
Test GitHub Notification System
Creates a test commit to verify GitHub notifications work
"""

import subprocess
import os
from datetime import datetime

def test_github_notification():
    """Test GitHub notification by creating a commit"""
    print("🧪 TESTING GITHUB NOTIFICATION SYSTEM")
    print("=" * 50)
    
    # Generate predictions
    print("1. Generating test predictions...")
    os.system("python3 daily_prediction_notifier.py")
    
    # Create test commit
    print("\n2. Creating test commit...")
    try:
        # Configure git
        subprocess.run(["git", "config", "--local", "user.email", "github-actions[bot]@users.noreply.github.com"], check=True)
        subprocess.run(["git", "config", "--local", "user.name", "github-actions[bot]"], check=True)
        
        # Add files
        subprocess.run(["git", "add", "daily_predictions_*.txt"], check=True)
        
        # Check if there are changes
        result = subprocess.run(["git", "diff", "--staged", "--quiet"], capture_output=True)
        if result.returncode == 0:
            print("ℹ️  No changes to commit")
            return False
        
        # Create commit
        date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        commit_message = f"""🧪 Test NHL Predictions - {date}

This is a test commit to verify GitHub notifications work.

📊 Test predictions generated by the self-learning model.
Check the daily_predictions_*.txt file for details.

🤖 Test generated at {date} CT"""
        
        subprocess.run(["git", "commit", "-m", commit_message], check=True)
        
        # Push
        subprocess.run(["git", "push"], check=True)
        
        print("✅ Test commit created and pushed!")
        print("📧 You should receive a GitHub notification shortly")
        print("🔔 Check your GitHub notifications or email")
        
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"❌ Error creating test commit: {e}")
        return False

def main():
    """Main test function"""
    print("This will create a test commit to verify GitHub notifications work.")
    print("You should receive a notification in your GitHub account.")
    print()
    
    confirm = input("Continue with test? (y/n): ").lower().strip()
    if confirm != 'y':
        print("Test cancelled")
        return
    
    success = test_github_notification()
    
    if success:
        print("\n🎉 TEST COMPLETE!")
        print("Check your GitHub notifications to confirm it worked.")
        print("If you received a notification, the daily system will work perfectly!")
    else:
        print("\n❌ Test failed - check the error messages above")

if __name__ == "__main__":
    main()
